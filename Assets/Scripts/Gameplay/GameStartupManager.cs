using UnityEngine;
using UnityEngine.UI;
using System.Collections;

/// <summary>
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –∏ –≤—ã–¥–∞—á–µ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
/// </summary>
public class GameStartupManager : MonoBehaviour
{
    [Header("Startup Settings")]
    public bool skipCutscene = false; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    public float cutsceneDuration = 5f; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ç—Å—Ü–µ–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    [Header("Starting Items")]
    public bool giveDiary = true;
    public bool giveLighter = true;
    public bool giveKey = true;
    
    [Header("Item Icons (optional)")]
    public Sprite diaryIcon;
    public Sprite lighterIcon;
    public Sprite keyIcon;
    
    [Header("UI References")]
    public GameObject cutsceneUI; // –ü–∞–Ω–µ–ª—å –∫–∞—Ç—Å—Ü–µ–Ω—ã (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    
    private bool hasGivenItems = false;
    private AutoInventoryUI inventoryUI;
    
    void Start()
    {
        inventoryUI = FindObjectOfType<AutoInventoryUI>();
        
        if (inventoryUI == null)
        {
            Debug.LogError("AutoInventoryUI –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º AutoInventoryUI.");
            return;
        }
        
        if (skipCutscene)
        {
            StartCoroutine(GiveStartingItems());
        }
        else
        {
            StartCoroutine(PlayCutsceneAndGiveItems());
        }
    }
    
    IEnumerator PlayCutsceneAndGiveItems()
    {
        Debug.Log("üé¨ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞—Ç—Å—Ü–µ–Ω–∞...");
        
        // –°–æ–∑–¥–∞–µ–º UI –∫–∞—Ç—Å—Ü–µ–Ω—ã
        CreateCutsceneUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç—Å—Ü–µ–Ω—É
        if (cutsceneUI != null)
        {
            cutsceneUI.SetActive(true);
        }
        
        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Ç—Å—Ü–µ–Ω—ã
        yield return new WaitForSeconds(cutsceneDuration);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç—Å—Ü–µ–Ω—É
        if (cutsceneUI != null)
        {
            cutsceneUI.SetActive(false);
        }
        
        Debug.Log("üé¨ –ö–∞—Ç—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        
        // –í—ã–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        yield return StartCoroutine(GiveStartingItems());
    }
    
    IEnumerator GiveStartingItems()
    {
        if (hasGivenItems) yield break;
        
        Debug.Log("üì¶ –í—ã–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...");
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        yield return new WaitForSeconds(0.5f);
        
        if (giveDiary)
        {
            inventoryUI.AddItem(KeyItems.CreateDiary(diaryIcon));
            yield return new WaitForSeconds(0.3f);
        }
        
        if (giveLighter)
        {
            inventoryUI.AddItem(KeyItems.CreateLighter(lighterIcon));
            yield return new WaitForSeconds(0.3f);
        }
        
        if (giveKey)
        {
            inventoryUI.AddItem(KeyItems.CreateKey(keyIcon));
            yield return new WaitForSeconds(0.3f);
        }
        
        hasGivenItems = true;
        Debug.Log("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–¥–∞–Ω—ã!");
    }
    
    void CreateCutsceneUI()
    {
        if (cutsceneUI != null) return;
        
        // –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –∫–∞—Ç—Å—Ü–µ–Ω—ã
        GameObject canvas = new GameObject("CutsceneCanvas");
        Canvas canvasComponent = canvas.AddComponent<Canvas>();
        canvasComponent.renderMode = RenderMode.ScreenSpaceOverlay;
        canvasComponent.sortingOrder = 10; // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        canvas.AddComponent<CanvasScaler>();
        canvas.AddComponent<GraphicRaycaster>();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–∞—Ç—Å—Ü–µ–Ω—ã
        cutsceneUI = new GameObject("CutscenePanel");
        cutsceneUI.transform.SetParent(canvas.transform, false);
        
        RectTransform panelRect = cutsceneUI.AddComponent<RectTransform>();
        panelRect.anchorMin = Vector2.zero;
        panelRect.anchorMax = Vector2.one;
        panelRect.offsetMin = Vector2.zero;
        panelRect.offsetMax = Vector2.zero;
        
        Image panelImage = cutsceneUI.AddComponent<Image>();
        panelImage.color = Color.black;
        
        // –¢–µ–∫—Å—Ç –∫–∞—Ç—Å—Ü–µ–Ω—ã
        GameObject textObj = new GameObject("CutsceneText");
        textObj.transform.SetParent(cutsceneUI.transform, false);
        
        RectTransform textRect = textObj.AddComponent<RectTransform>();
        textRect.anchorMin = new Vector2(0.1f, 0.4f);
        textRect.anchorMax = new Vector2(0.9f, 0.6f);
        textRect.offsetMin = Vector2.zero;
        textRect.offsetMax = Vector2.zero;
        
        TMPro.TextMeshProUGUI cutsceneText = textObj.AddComponent<TMPro.TextMeshProUGUI>();
        cutsceneText.text = "–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ —Ç–µ–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ...\n\n–í–æ–∫—Ä—É–≥ –≤–∞—Å –ª–µ–∂–∞—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n‚Ä¢ –°—Ç–∞—Ä—ã–π –¥–Ω–µ–≤–Ω–∏–∫\n‚Ä¢ –ó–∞–∂–∏–≥–∞–ª–∫–∞\n‚Ä¢ –†–∂–∞–≤—ã–π –∫–ª—é—á\n\n–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –º–µ—Å—Ç–æ–º...";
        cutsceneText.fontSize = 24;
        cutsceneText.alignment = TMPro.TextAlignmentOptions.Center;
        cutsceneText.color = Color.white;
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        GameObject loadingObj = new GameObject("LoadingText");
        loadingObj.transform.SetParent(cutsceneUI.transform, false);
        
        RectTransform loadingRect = loadingObj.AddComponent<RectTransform>();
        loadingRect.anchorMin = new Vector2(0.5f, 0.2f);
        loadingRect.anchorMax = new Vector2(0.5f, 0.2f);
        loadingRect.sizeDelta = new Vector2(400, 50);
        loadingRect.anchoredPosition = Vector2.zero;
        
        TMPro.TextMeshProUGUI loadingText = loadingObj.AddComponent<TMPro.TextMeshProUGUI>();
        loadingText.text = "–ó–∞–≥—Ä—É–∑–∫–∞...";
        loadingText.fontSize = 18;
        loadingText.alignment = TMPro.TextAlignmentOptions.Center;
        loadingText.color = new Color(0.7f, 0.7f, 0.7f, 1f);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        StartCoroutine(AnimateLoadingText(loadingText));
    }
    
    IEnumerator AnimateLoadingText(TMPro.TextMeshProUGUI loadingText)
    {
        string baseText = "–ó–∞–≥—Ä—É–∑–∫–∞";
        int dots = 0;
        
        while (cutsceneUI != null && cutsceneUI.activeInHierarchy)
        {
            string dotsStr = new string('.', (dots % 4) + 1);
            loadingText.text = baseText + dotsStr;
            dots++;
            
            yield return new WaitForSeconds(0.5f);
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    public void SkipCutscene()
    {
        if (cutsceneUI != null)
        {
            cutsceneUI.SetActive(false);
        }
        StartCoroutine(GiveStartingItems());
    }
    
    public void GiveItemManually(string itemName)
    {
        if (inventoryUI == null) return;
        
        switch (itemName.ToLower())
        {
            case "diary":
            case "–¥–Ω–µ–≤–Ω–∏–∫":
                inventoryUI.AddItem(KeyItems.CreateDiary(diaryIcon));
                break;
            case "lighter":
            case "–∑–∞–∂–∏–≥–∞–ª–∫–∞":
                inventoryUI.AddItem(KeyItems.CreateLighter(lighterIcon));
                break;
            case "key":
            case "–∫–ª—é—á":
                inventoryUI.AddItem(KeyItems.CreateKey(keyIcon));
                break;
        }
    }
}