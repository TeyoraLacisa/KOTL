using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–∂–∏–≥–∞–ª–∫–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
/// </summary>
public class LighterInventoryIntegration : MonoBehaviour
{
    [Header("Inventory Integration")]
    public int lighterSlotIndex = 1; // –ò–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞ –∑–∞–∂–∏–≥–∞–ª–∫–∏ (0, 1, 2)
    public GameObject lighterInHand; // –û–±—ä–µ–∫—Ç –∑–∞–∂–∏–≥–∞–ª–∫–∏ –≤ —Ä—É–∫–µ
    public Transform handPosition; // –ü–æ–∑–∏—Ü–∏—è —Ä—É–∫–∏
    
    [Header("First Person Setup")]
    public FirstPersonCameraSetup cameraSetup;
    
    [Header("UI References")]
    public Slider fuelSlider;
    public Text fuelText;
    
    private LighterMechanics lighterMechanics;
    private bool isLighterSelected = false;
    private GameObject currentLighterInstance;
    
    void Start()
    {
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∂–∏–≥–∞–ª–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        FindLighterInInventory();
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∂–∏–≥–∞–ª–∫—É –≤ —Ä—É–∫–µ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (lighterInHand == null)
        {
            CreateLighterInHand();
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
        SetupUI();
    }
    
    void FindLighterInInventory()
    {
        // –ò—â–µ–º –∑–∞–∂–∏–≥–∞–ª–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        InventorySystem inventory = InventorySystem.Instance;
        if (inventory != null)
        {
            for (int i = 0; i < inventory.inventory.Count; i++)
            {
                if (inventory.inventory[i].itemName == "–ó–∞–∂–∏–≥–∞–ª–∫–∞")
                {
                    lighterSlotIndex = i;
                    Debug.Log($"‚úÖ –ó–∞–∂–∏–≥–∞–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ—Ç–µ {i}");
                    break;
                }
            }
        }
    }
    
    void CreateLighterInHand()
    {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∂–∏–≥–∞–ª–∫–∏ –≤ —Ä—É–∫–µ
        lighterInHand = new GameObject("LighterInHand");
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞–º–µ—Ä—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
        if (cameraSetup != null)
        {
            lighterInHand.transform.position = cameraSetup.GetLighterWorldPosition();
            lighterInHand.transform.rotation = cameraSetup.GetLighterWorldRotation();
        }
        else
        {
            lighterInHand.transform.SetParent(handPosition != null ? handPosition : transform);
            lighterInHand.transform.localPosition = Vector3.zero;
            lighterInHand.transform.localRotation = Quaternion.identity;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ—Ö–∞–Ω–∏–∫–∏ –∑–∞–∂–∏–≥–∞–ª–∫–∏
        lighterMechanics = lighterInHand.AddComponent<LighterMechanics>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        SimpleLighterVisual lighterVisual = lighterInHand.AddComponent<SimpleLighterVisual>();
        lighterMechanics.lighterVisual = lighterVisual;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
        FirstPersonLighterAnimation lighterAnimation = lighterInHand.AddComponent<FirstPersonLighterAnimation>();
        lighterMechanics.lighterAnimation = lighterAnimation;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI —Å—Å—ã–ª–∫–∏
        lighterMechanics.fuelSlider = fuelSlider;
        lighterMechanics.fuelText = fuelText;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–∂–∏–≥–∞–ª–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        lighterInHand.SetActive(false);
        
        Debug.Log("‚úÖ –ó–∞–∂–∏–≥–∞–ª–∫–∞ –≤ —Ä—É–∫–µ —Å–æ–∑–¥–∞–Ω–∞!");
    }
    
    void SetupUI()
    {
        // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (fuelSlider == null || fuelText == null)
        {
            CreateFuelUI();
        }
    }
    
    void CreateFuelUI()
    {
        // –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è UI —Ç–æ–ø–ª–∏–≤–∞
        GameObject fuelCanvas = new GameObject("FuelUI_Canvas");
        Canvas canvas = fuelCanvas.AddComponent<Canvas>();
        canvas.renderMode = RenderMode.ScreenSpaceOverlay;
        canvas.sortingOrder = 5;
        
        CanvasScaler scaler = fuelCanvas.AddComponent<CanvasScaler>();
        scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
        scaler.referenceResolution = new Vector2(1920, 1080);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Ç–æ–ø–ª–∏–≤–∞
        GameObject fuelPanel = new GameObject("FuelPanel");
        fuelPanel.transform.SetParent(fuelCanvas.transform, false);
        
        RectTransform panelRect = fuelPanel.AddComponent<RectTransform>();
        panelRect.anchorMin = new Vector2(0, 1);
        panelRect.anchorMax = new Vector2(0, 1);
        panelRect.sizeDelta = new Vector2(200, 50);
        panelRect.anchoredPosition = new Vector2(120, -30);
        
        Image panelBg = fuelPanel.AddComponent<Image>();
        panelBg.color = new Color(0.1f, 0.1f, 0.1f, 0.8f);
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Ç–æ–ø–ª–∏–≤–∞
        GameObject sliderObj = new GameObject("FuelSlider");
        sliderObj.transform.SetParent(fuelPanel.transform, false);
        
        RectTransform sliderRect = sliderObj.AddComponent<RectTransform>();
        sliderRect.anchorMin = new Vector2(0.1f, 0.3f);
        sliderRect.anchorMax = new Vector2(0.9f, 0.7f);
        sliderRect.offsetMin = Vector2.zero;
        sliderRect.offsetMax = Vector2.zero;
        
        fuelSlider = sliderObj.AddComponent<Slider>();
        fuelSlider.minValue = 0f;
        fuelSlider.maxValue = 1f;
        fuelSlider.value = 1f;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–ª–∏–≤–∞
        GameObject textObj = new GameObject("FuelText");
        textObj.transform.SetParent(fuelPanel.transform, false);
        
        RectTransform textRect = textObj.AddComponent<RectTransform>();
        textRect.anchorMin = new Vector2(0, 0);
        textRect.anchorMax = new Vector2(1, 0.3f);
        textRect.offsetMin = Vector2.zero;
        textRect.offsetMax = Vector2.zero;
        
        fuelText = textObj.AddComponent<Text>();
        fuelText.text = "–¢–æ–ø–ª–∏–≤–æ: 100%";
        fuelText.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
        fuelText.fontSize = 12;
        fuelText.color = Color.white;
        fuelText.alignment = TextAnchor.MiddleCenter;
        
        // –°–∫—Ä—ã–≤–∞–µ–º UI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        fuelPanel.SetActive(false);
    }
    
    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –∑–∞–∂–∏–≥–∞–ª–∫–∏
        CheckLighterSelection();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∂–∏–≥–∞–ª–∫–∏ –≤ —Ä—É–∫–µ
        UpdateLighterInHand();
    }
    
    void CheckLighterSelection()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–ª–æ—Ç —Å –∑–∞–∂–∏–≥–∞–ª–∫–æ–π
        bool wasSelected = isLighterSelected;
        isLighterSelected = IsLighterSlotSelected();
        
        if (isLighterSelected && !wasSelected)
        {
            // –ó–∞–∂–∏–≥–∞–ª–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ä—É–∫–µ
            ShowLighterInHand();
        }
        else if (!isLighterSelected && wasSelected)
        {
            // –ó–∞–∂–∏–≥–∞–ª–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ - —Å–∫—Ä—ã–≤–∞–µ–º
            HideLighterInHand();
        }
    }
    
    bool IsLighterSlotSelected()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–ª–æ—Ç —Å –∑–∞–∂–∏–≥–∞–ª–∫–æ–π
        // –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤
        
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å HUDController:
        HUDController hudController = FindObjectOfType<HUDController>();
        if (hudController != null)
        {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É HUDController –µ—Å—Ç—å selectedSlot
            return hudController.selectedSlot == lighterSlotIndex;
        }
        
        return false;
    }
    
    void ShowLighterInHand()
    {
        if (lighterInHand != null)
        {
            lighterInHand.SetActive(true);
            
            if (lighterMechanics != null)
            {
                lighterMechanics.SetInHand(true);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI —Ç–æ–ø–ª–∏–≤–∞
            if (fuelSlider != null)
            {
                fuelSlider.transform.parent.gameObject.SetActive(true);
            }
            
            Debug.Log("üî• –ó–∞–∂–∏–≥–∞–ª–∫–∞ –≤ —Ä—É–∫–µ!");
        }
    }
    
    void HideLighterInHand()
    {
        if (lighterInHand != null)
        {
            lighterInHand.SetActive(false);
            
            if (lighterMechanics != null)
            {
                lighterMechanics.SetInHand(false);
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º UI —Ç–æ–ø–ª–∏–≤–∞
            if (fuelSlider != null)
            {
                fuelSlider.transform.parent.gameObject.SetActive(false);
            }
            
            Debug.Log("üí® –ó–∞–∂–∏–≥–∞–ª–∫–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ —Ä—É–∫–∏!");
        }
    }
    
    void UpdateLighterInHand()
    {
        if (isLighterSelected && lighterMechanics != null)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ø–ª–∏–≤–∞
            if (fuelSlider != null)
            {
                fuelSlider.value = lighterMechanics.GetFuelPercentage();
            }
            
            if (fuelText != null)
            {
                fuelText.text = $"–¢–æ–ø–ª–∏–≤–æ: {lighterMechanics.GetFuelPercentage() * 100:F1}%";
            }
        }
    }
    
    public void RefillLighter()
    {
        if (lighterMechanics != null)
        {
            lighterMechanics.RefillFuel();
        }
    }
    
    public bool IsLighterLit()
    {
        return lighterMechanics != null && lighterMechanics.isLit;
    }
    
    public bool HasFuel()
    {
        return lighterMechanics != null && lighterMechanics.HasFuel();
    }
}
