using UnityEngine;
using System.Collections;

/// <summary>
/// –ú–µ—Ö–∞–Ω–∏–∫–∞ —Å–≤–µ—á–µ–Ω–∏—è —è–Ω—Ç–∞—Ä—è –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∑–∞–∂–∏–≥–∞–ª–∫–∏
/// </summary>
public class AmberGlow : MonoBehaviour
{
    [Header("Glow Settings")]
    public Light amberLight;
    public float maxGlowIntensity = 2f;
    public float glowFadeSpeed = 2f;
    public Color glowColor = new Color(1f, 0.8f, 0.3f);
    
    [Header("Particle Settings")]
    public ParticleSystem glowParticles;
    
    [Header("Audio Settings")]
    public AudioSource audioSource;
    public AudioClip glowSound;
    
    private float currentGlowIntensity = 0f;
    private bool isGlowing = false;
    private Coroutine glowCoroutine;
    
    void Start()
    {
        SetupAmber();
    }
    
    void SetupAmber()
    {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–µ—Ç–∞ —è–Ω—Ç–∞—Ä—è
        if (amberLight == null)
        {
            amberLight = gameObject.AddComponent<Light>();
        }
        
        amberLight.type = LightType.Point;
        amberLight.intensity = 0f;
        amberLight.range = 4f;
        amberLight.color = glowColor;
        amberLight.enabled = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–∏—Ü —Å–≤–µ—á–µ–Ω–∏—è
        if (glowParticles == null)
        {
            GameObject particleObj = new GameObject("GlowParticles");
            particleObj.transform.SetParent(transform);
            particleObj.transform.localPosition = Vector3.zero;
            glowParticles = particleObj.AddComponent<ParticleSystem>();
        }
        
        SetupGlowParticles();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }
        
        audioSource.playOnAwake = false;
        audioSource.volume = 0.5f;
        
        Debug.Log("‚úÖ –Ø–Ω—Ç–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
    }
    
    void SetupGlowParticles()
    {
        var main = glowParticles.main;
        main.startLifetime = 2f;
        main.startSpeed = 0.2f;
        main.startSize = 0.05f;
        main.startColor = glowColor;
        main.maxParticles = 30;
        main.simulationSpace = ParticleSystemSimulationSpace.Local;
        
        var emission = glowParticles.emission;
        emission.rateOverTime = 0f;
        
        var shape = glowParticles.shape;
        shape.shapeType = ParticleSystemShapeType.Sphere;
        shape.radius = 0.5f;
        
        var velocityOverLifetime = glowParticles.velocityOverLifetime;
        velocityOverLifetime.enabled = true;
        velocityOverLifetime.space = ParticleSystemSimulationSpace.Local;
        velocityOverLifetime.y = new ParticleSystem.MinMaxCurve(0.5f);
        
        var colorOverLifetime = glowParticles.colorOverLifetime;
        colorOverLifetime.enabled = true;
        Gradient gradient = new Gradient();
        gradient.SetKeys(
            new GradientColorKey[] { new GradientColorKey(glowColor, 0.0f), new GradientColorKey(Color.clear, 1.0f) },
            new GradientAlphaKey[] { new GradientAlphaKey(1.0f, 0.0f), new GradientAlphaKey(0.0f, 1.0f) }
        );
        colorOverLifetime.color = gradient;
        
        glowParticles.Stop();
    }
    
    public void StartGlow()
    {
        if (isGlowing) return;
        
        isGlowing = true;
        
        // –í–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç
        amberLight.enabled = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        glowParticles.Play();
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        if (glowSound != null)
        {
            audioSource.PlayOneShot(glowSound);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É —Å–≤–µ—á–µ–Ω–∏—è
        if (glowCoroutine != null)
        {
            StopCoroutine(glowCoroutine);
        }
        glowCoroutine = StartCoroutine(GlowEffect());
        
        Debug.Log("‚ú® –Ø–Ω—Ç–∞—Ä—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–µ—Ç–∏—Ç—å—Å—è!");
    }
    
    public void StopGlow()
    {
        if (!isGlowing) return;
        
        isGlowing = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
        if (glowCoroutine != null)
        {
            StopCoroutine(glowCoroutine);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        StartCoroutine(FadeOutGlow());
        
        Debug.Log("üåô –Ø–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç —Å–≤–µ—Ç–∏—Ç—å—Å—è!");
    }
    
    IEnumerator GlowEffect()
    {
        while (isGlowing)
        {
            // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—á–µ–Ω–∏—è
            currentGlowIntensity = Mathf.Lerp(currentGlowIntensity, maxGlowIntensity, glowFadeSpeed * Time.deltaTime);
            amberLight.intensity = currentGlowIntensity;
            
            yield return null;
        }
    }
    
    IEnumerator FadeOutGlow()
    {
        while (currentGlowIntensity > 0.1f)
        {
            currentGlowIntensity = Mathf.Lerp(currentGlowIntensity, 0f, glowFadeSpeed * Time.deltaTime);
            amberLight.intensity = currentGlowIntensity;
            
            yield return null;
        }
        
        // –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç –∏ —á–∞—Å—Ç–∏—Ü—ã
        amberLight.enabled = false;
        glowParticles.Stop();
        currentGlowIntensity = 0f;
    }
    
    void OnTriggerEnter(Collider other)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–∂–∏–≥–∞–ª–∫–∞ –≤—Ö–æ–¥–∏—Ç –≤ –∑–æ–Ω—É
        LighterMechanics lighter = other.GetComponent<LighterMechanics>();
        if (lighter != null && lighter.isLit)
        {
            StartGlow();
        }
    }
    
    void OnTriggerExit(Collider other)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–∂–∏–≥–∞–ª–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã
        LighterMechanics lighter = other.GetComponent<LighterMechanics>();
        if (lighter != null)
        {
            StopGlow();
        }
    }
}
