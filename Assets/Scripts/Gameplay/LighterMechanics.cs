using UnityEngine;
using UnityEngine.UI;
using System.Collections;

/// <summary>
/// –ú–µ—Ö–∞–Ω–∏–∫–∞ –∑–∞–∂–∏–≥–∞–ª–∫–∏ —Å —Ç–æ–ø–ª–∏–≤–æ–º, —Å–≤–µ—Ç–æ–º –∏ —á–∞—Å—Ç–∏—Ü–∞–º–∏
/// </summary>
public class LighterMechanics : MonoBehaviour
{
    [Header("Lighter Settings")]
    public bool isLit = false;
    public float fuelAmount = 100f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ
    public float fuelConsumptionRate = 1f; // –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ —Å–µ–∫—É–Ω–¥—É
    public float fuelRefillAmount = 25f; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –ø—Ä–∏ –∑–∞–ø—Ä–∞–≤–∫–µ
    
    [Header("Light Settings")]
    public Light pointLight;
    public float lightIntensity = 1.5f;
    public float lightRange = 3f;
    public Color lightColor = new Color(1f, 0.6f, 0.2f); // –¢—ë–ø–ª—ã–π —Ü–≤–µ—Ç
    
    [Header("Particle Settings")]
    public ParticleSystem flameParticles;
    public ParticleSystem sparkParticles;
    
    [Header("Audio Settings")]
    public AudioSource audioSource;
    public AudioClip igniteSound;
    public AudioClip burnSound;
    public AudioClip extinguishSound;
    
    [Header("UI Settings")]
    public Slider fuelSlider;
    public Text fuelText;
    
    [Header("Amber Interaction")]
    public float amberDetectionRange = 5f;
    public LayerMask amberLayer = 1;
    
    [Header("Visual")]
    public SimpleLighterVisual lighterVisual;
    public FirstPersonLighterAnimation lighterAnimation;
    
    private float currentFuel;
    private bool isInHand = false;
    private Coroutine burnCoroutine;
    private AudioSource burnAudioSource;
    
    public static LighterMechanics Instance { get; private set; }
    
    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }
    
    void Start()
    {
        currentFuel = fuelAmount;
        SetupLighter();
        UpdateUI();
    }
    
    void SetupLighter()
    {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–µ—Ç–∞
        if (pointLight == null)
        {
            pointLight = gameObject.AddComponent<Light>();
        }
        
        pointLight.type = LightType.Point;
        pointLight.intensity = 0f;
        pointLight.range = lightRange;
        pointLight.color = lightColor;
        pointLight.enabled = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–∏—Ü –ø–ª–∞–º–µ–Ω–∏
        if (flameParticles == null)
        {
            GameObject flameObj = new GameObject("FlameParticles");
            flameObj.transform.SetParent(transform);
            flameObj.transform.localPosition = Vector3.zero;
            flameParticles = flameObj.AddComponent<ParticleSystem>();
        }
        
        SetupFlameParticles();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–∏—Ü –∏—Å–∫—Ä
        if (sparkParticles == null)
        {
            GameObject sparkObj = new GameObject("SparkParticles");
            sparkObj.transform.SetParent(transform);
            sparkObj.transform.localPosition = Vector3.zero;
            sparkParticles = sparkObj.AddComponent<ParticleSystem>();
        }
        
        SetupSparkParticles();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }
        
        audioSource.playOnAwake = false;
        audioSource.volume = 0.7f;
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π AudioSource –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∑–≤—É–∫–∞ –≥–æ—Ä–µ–Ω–∏—è
        burnAudioSource = gameObject.AddComponent<AudioSource>();
        burnAudioSource.playOnAwake = false;
        burnAudioSource.loop = true;
        burnAudioSource.volume = 0.3f;
        
        Debug.Log("‚úÖ –ó–∞–∂–∏–≥–∞–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");
    }
    
    void SetupFlameParticles()
    {
        var main = flameParticles.main;
        main.startLifetime = 0.5f;
        main.startSpeed = 0.5f;
        main.startSize = 0.1f;
        main.startColor = new Color(1f, 0.5f, 0f);
        main.maxParticles = 50;
        main.simulationSpace = ParticleSystemSimulationSpace.Local;
        
        var emission = flameParticles.emission;
        emission.rateOverTime = 0f;
        
        var shape = flameParticles.shape;
        shape.shapeType = ParticleSystemShapeType.Cone;
        shape.angle = 15f;
        shape.radius = 0.01f;
        
        var velocityOverLifetime = flameParticles.velocityOverLifetime;
        velocityOverLifetime.enabled = true;
        velocityOverLifetime.space = ParticleSystemSimulationSpace.Local;
        velocityOverLifetime.y = new ParticleSystem.MinMaxCurve(1f);
        
        var colorOverLifetime = flameParticles.colorOverLifetime;
        colorOverLifetime.enabled = true;
        Gradient gradient = new Gradient();
        gradient.SetKeys(
            new GradientColorKey[] { new GradientColorKey(Color.yellow, 0.0f), new GradientColorKey(Color.red, 1.0f) },
            new GradientAlphaKey[] { new GradientAlphaKey(1.0f, 0.0f), new GradientAlphaKey(0.0f, 1.0f) }
        );
        colorOverLifetime.color = gradient;
        
        flameParticles.Stop();
    }
    
    void SetupSparkParticles()
    {
        var main = sparkParticles.main;
        main.startLifetime = 0.3f;
        main.startSpeed = 2f;
        main.startSize = 0.05f;
        main.startColor = Color.yellow;
        main.maxParticles = 20;
        
        var emission = sparkParticles.emission;
        emission.rateOverTime = 0f;
        
        var shape = sparkParticles.shape;
        shape.shapeType = ParticleSystemShapeType.Cone;
        shape.angle = 30f;
        shape.radius = 0.01f;
        
        sparkParticles.Stop();
    }
    
    void Update()
    {
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∂–∏–≥–∞–ª–∫–æ–π
        if (isInHand)
        {
            if (Input.GetMouseButtonDown(1)) // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            {
                if (isLit)
                {
                    Extinguish();
                }
                else
                {
                    Ignite();
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —è–Ω—Ç–∞—Ä—ë–º
        CheckAmberInteraction();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        UpdateUI();
    }
    
    public void Ignite()
    {
        if (currentFuel <= 0)
        {
            Debug.Log("‚ùå –ù–µ—Ç —Ç–æ–ø–ª–∏–≤–∞!");
            return;
        }
        
        isLit = true;
        
        // –í–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç
        pointLight.enabled = true;
        pointLight.intensity = lightIntensity;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø–ª–∞–º–µ–Ω–∏
        flameParticles.Play();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –∏—Å–∫—Ä
        sparkParticles.Play();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–º—è
        if (lighterVisual != null)
        {
            lighterVisual.ShowFlame(true);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–∂–∏–≥–∞–Ω–∏—è
        if (lighterAnimation != null)
        {
            lighterAnimation.PlayIgniteAnimation();
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–∂–∏–≥–∞–Ω–∏—è
        if (igniteSound != null)
        {
            audioSource.PlayOneShot(igniteSound);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–≤—É–∫ –≥–æ—Ä–µ–Ω–∏—è
        if (burnSound != null)
        {
            burnAudioSource.clip = burnSound;
            burnAudioSource.Play();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
        if (burnCoroutine != null)
        {
            StopCoroutine(burnCoroutine);
        }
        burnCoroutine = StartCoroutine(BurnFuel());
        
        Debug.Log("üî• –ó–∞–∂–∏–≥–∞–ª–∫–∞ –∑–∞–∂–∂–µ–Ω–∞!");
    }
    
    public void Extinguish()
    {
        isLit = false;
        
        // –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç
        pointLight.enabled = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        flameParticles.Stop();
        sparkParticles.Stop();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–º—è
        if (lighterVisual != null)
        {
            lighterVisual.ShowFlame(false);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—É—à–µ–Ω–∏—è
        if (lighterAnimation != null)
        {
            lighterAnimation.PlayExtinguishAnimation();
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –≥–æ—Ä–µ–Ω–∏—è
        burnAudioSource.Stop();
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ç—É—à–µ–Ω–∏—è
        if (extinguishSound != null)
        {
            audioSource.PlayOneShot(extinguishSound);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
        if (burnCoroutine != null)
        {
            StopCoroutine(burnCoroutine);
        }
        
        Debug.Log("üí® –ó–∞–∂–∏–≥–∞–ª–∫–∞ –ø–æ—Ç—É—à–µ–Ω–∞!");
    }
    
    IEnumerator BurnFuel()
    {
        while (isLit && currentFuel > 0)
        {
            currentFuel -= fuelConsumptionRate * Time.deltaTime;
            currentFuel = Mathf.Max(0, currentFuel);
            
            // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, —Ç—É—à–∏–º –∑–∞–∂–∏–≥–∞–ª–∫—É
            if (currentFuel <= 0)
            {
                Extinguish();
                Debug.Log("‚õΩ –¢–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!");
            }
            
            yield return null;
        }
    }
    
    public void RefillFuel()
    {
        currentFuel = Mathf.Min(fuelAmount, currentFuel + fuelRefillAmount);
        Debug.Log($"‚õΩ –ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ! –¢–æ–ø–ª–∏–≤–æ: {currentFuel:F1}%");
    }
    
    void CheckAmberInteraction()
    {
        if (!isLit) return;
        
        // –ò—â–µ–º —è–Ω—Ç–∞—Ä—å –≤ —Ä–∞–¥–∏—É—Å–µ
        Collider[] ambers = Physics.OverlapSphere(transform.position, amberDetectionRange, amberLayer);
        
        foreach (Collider amber in ambers)
        {
            AmberGlow amberGlow = amber.GetComponent<AmberGlow>();
            if (amberGlow != null)
            {
                amberGlow.StartGlow();
            }
        }
    }
    
    void UpdateUI()
    {
        if (fuelSlider != null)
        {
            fuelSlider.value = currentFuel / fuelAmount;
        }
        
        if (fuelText != null)
        {
            fuelText.text = $"–¢–æ–ø–ª–∏–≤–æ: {currentFuel:F1}%";
        }
    }
    
    public void SetInHand(bool inHand)
    {
        isInHand = inHand;
        if (!inHand && isLit)
        {
            Extinguish();
        }
    }
    
    public bool HasFuel()
    {
        return currentFuel > 0;
    }
    
    public float GetFuelPercentage()
    {
        return currentFuel / fuelAmount;
    }
    
    void OnDrawGizmosSelected()
    {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —è–Ω—Ç–∞—Ä—è
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, amberDetectionRange);
    }
}
