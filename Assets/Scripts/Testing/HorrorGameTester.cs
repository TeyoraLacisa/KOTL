using UnityEngine;
using UnityEngine.UI;
using TMPro;

namespace HorrorGame.Testing
{
    public class HorrorGameTester : MonoBehaviour
    {
        [Header("Test Settings")]
        [SerializeField] private bool autoTestOnStart = false;
        [SerializeField] private bool showDebugInfo = true;
        [SerializeField] private float testInterval = 1f;
        
        [Header("Test Results")]
        [SerializeField] private TextMeshProUGUI testResultsText;
        [SerializeField] private Image testStatusIndicator;
        [SerializeField] private Color successColor = Color.green;
        [SerializeField] private Color failureColor = Color.red;
        
        private int testsPassed = 0;
        private int totalTests = 0;
        private bool isTesting = false;
        
        void Start()
        {
            if (autoTestOnStart)
            {
                StartTesting();
            }
        }
        
        void Update()
        {
            if (showDebugInfo)
            {
                DisplayDebugInfo();
            }
            
            // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏
            if (Input.GetKeyDown(KeyCode.F1))
            {
                StartTesting();
            }
            
            if (Input.GetKeyDown(KeyCode.F2))
            {
                TestMovement();
            }
            
            if (Input.GetKeyDown(KeyCode.F3))
            {
                TestAudio();
            }
            
            if (Input.GetKeyDown(KeyCode.F4))
            {
                TestUI();
            }
            
            if (Input.GetKeyDown(KeyCode.F5))
            {
                TestLighting();
            }
        }
        
        public void StartTesting()
        {
            if (isTesting) return;
            
            isTesting = true;
            testsPassed = 0;
            totalTests = 0;
            
            Debug.Log("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lighthouse Guard...");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            TestMovement();
            TestAudio();
            TestUI();
            TestLighting();
            TestIntegration();
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            float successRate = (float)testsPassed / totalTests * 100f;
            Debug.Log($"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {testsPassed}/{totalTests} ({successRate:F1}%)");
            
            if (testResultsText != null)
            {
                testResultsText.text = $"–¢–µ—Å—Ç—ã: {testsPassed}/{totalTests}\n–£—Å–ø–µ—Ö: {successRate:F1}%";
            }
            
            if (testStatusIndicator != null)
            {
                testStatusIndicator.color = successRate >= 80f ? successColor : failureColor;
            }
            
            isTesting = false;
        }
        
        void TestMovement()
        {
            totalTests++;
            Debug.Log("üéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º FPS –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            var fpsController = FindObjectOfType<HorrorGame.Player.FPSController>();
            if (fpsController != null)
            {
                Debug.Log("‚úÖ FPS Controller –Ω–∞–π–¥–µ–Ω");
                testsPassed++;
            }
            else
            {
                Debug.LogError("‚ùå FPS Controller –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Character Controller
            var characterController = FindObjectOfType<CharacterController>();
            if (characterController != null)
            {
                Debug.Log("‚úÖ Character Controller –Ω–∞–π–¥–µ–Ω");
                testsPassed++;
            }
            else
            {
                Debug.LogError("‚ùå Character Controller –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–µ—Ä—É
            var camera = FindObjectOfType<Camera>();
            if (camera != null)
            {
                Debug.Log("‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞");
                testsPassed++;
            }
            else
            {
                Debug.LogError("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
        }
        
        void TestAudio()
        {
            totalTests++;
            Debug.Log("üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—É...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Audio Manager
            var audioManager = FindObjectOfType<HorrorGame.Audio.HorrorAudioManager>();
            if (audioManager != null)
            {
                Debug.Log("‚úÖ Horror Audio Manager –Ω–∞–π–¥–µ–Ω");
                testsPassed++;
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤
                try
                {
                    audioManager.PlayFootstepSound();
                    Debug.Log("‚úÖ –ó–≤—É–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è");
                    testsPassed++;
                }
                catch (System.Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–æ–≤: {e.Message}");
                }
            }
            else
            {
                Debug.LogError("‚ùå Horror Audio Manager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Audio Sources
            var audioSources = FindObjectsOfType<AudioSource>();
            if (audioSources.Length > 0)
            {
                Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {audioSources.Length} Audio Source(–æ–≤)");
                testsPassed++;
            }
            else
            {
                Debug.LogError("‚ùå Audio Sources –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            }
        }
        
        void TestUI()
        {
            totalTests++;
            Debug.Log("üñ• –¢–µ—Å—Ç–∏—Ä—É–µ–º UI —Å–∏—Å—Ç–µ–º—É...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º UI Manager
            var uiManager = FindObjectOfType<HorrorGame.UI.HorrorUIManager>();
            if (uiManager != null)
            {
                Debug.Log("‚úÖ Horror UI Manager –Ω–∞–π–¥–µ–Ω");
                testsPassed++;
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º UI —Ñ—É–Ω–∫—Ü–∏–∏
                try
                {
                    uiManager.SetHealth(75f);
                    uiManager.SetSanity(50f);
                    uiManager.ShowBloodEffect(0.3f);
                    Debug.Log("‚úÖ UI —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
                    testsPassed++;
                }
                catch (System.Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ UI —Ñ—É–Ω–∫—Ü–∏–π: {e.Message}");
                }
            }
            else
            {
                Debug.LogError("‚ùå Horror UI Manager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Canvas
            var canvas = FindObjectOfType<Canvas>();
            if (canvas != null)
            {
                Debug.Log("‚úÖ Canvas –Ω–∞–π–¥–µ–Ω");
                testsPassed++;
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)");
            }
        }
        
        void TestLighting()
        {
            totalTests++;
            Debug.Log("üí° –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Å–≤–µ—â–µ–Ω–∏—è...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Lighting Controller
            var lightingController = FindObjectOfType<HorrorGame.Environment.HorrorLightingController>();
            if (lightingController != null)
            {
                Debug.Log("‚úÖ Horror Lighting Controller –Ω–∞–π–¥–µ–Ω");
                testsPassed++;
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
                try
                {
                    lightingController.SetHorrorIntensity(0.5f);
                    lightingController.SetFlickering(true);
                    Debug.Log("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç");
                    testsPassed++;
                }
                catch (System.Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ—Å–≤–µ—â–µ–Ω–∏—è: {e.Message}");
                }
            }
            else
            {
                Debug.LogError("‚ùå Horror Lighting Controller –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
            var lights = FindObjectsOfType<Light>();
            if (lights.Length > 0)
            {
                Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {lights.Length} –∏—Å—Ç–æ—á–Ω–∏–∫(–æ–≤) —Å–≤–µ—Ç–∞");
                testsPassed++;
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        }
        
        void TestIntegration()
        {
            totalTests++;
            Debug.Log("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            bool allManagersFound = true;
            
            if (FindObjectOfType<HorrorGame.Player.FPSController>() == null)
            {
                Debug.LogError("‚ùå FPS Controller –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
                allManagersFound = false;
            }
            
            if (FindObjectOfType<HorrorGame.Audio.HorrorAudioManager>() == null)
            {
                Debug.LogError("‚ùå Audio Manager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
                allManagersFound = false;
            }
            
            if (FindObjectOfType<HorrorGame.UI.HorrorUIManager>() == null)
            {
                Debug.LogError("‚ùå UI Manager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
                allManagersFound = false;
            }
            
            if (FindObjectOfType<HorrorGame.Environment.HorrorLightingController>() == null)
            {
                Debug.LogError("‚ùå Lighting Controller –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
                allManagersFound = false;
            }
            
            if (allManagersFound)
            {
                Debug.Log("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã");
                testsPassed++;
            }
        }
        
        void DisplayDebugInfo()
        {
            if (testResultsText != null)
            {
                string debugInfo = $"FPS: {(1.0f / Time.deltaTime):F0}\n";
                debugInfo += $"–ü–æ–∑–∏—Ü–∏—è: {transform.position}\n";
                debugInfo += $"–í—Ä–µ–º—è: {Time.time:F1}s\n";
                debugInfo += $"–¢–µ—Å—Ç—ã: {testsPassed}/{totalTests}";
                
                testResultsText.text = debugInfo;
            }
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è UI –∫–Ω–æ–ø–æ–∫
        public void RunAllTests()
        {
            StartTesting();
        }
        
        public void TestMovementOnly()
        {
            TestMovement();
        }
        
        public void TestAudioOnly()
        {
            TestAudio();
        }
        
        public void TestUIOnly()
        {
            TestUI();
        }
        
        public void TestLightingOnly()
        {
            TestLighting();
        }
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤
        public void ResetTests()
        {
            testsPassed = 0;
            totalTests = 0;
            
            if (testResultsText != null)
            {
                testResultsText.text = "–¢–µ—Å—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã";
            }
            
            if (testStatusIndicator != null)
            {
                testStatusIndicator.color = Color.white;
            }
            
            Debug.Log("üîÑ –¢–µ—Å—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã");
        }
    }
}